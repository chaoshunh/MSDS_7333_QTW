,
noHost =
function(msg)
{
# Or use partial matching.
idx = pmatch("Message-", names(msg$header))
if(is.na(idx)) return(NA)
tmp = msg$header[idx]
return(length(grep(".*@[^[:space:]]+", tmp)) ==  0)
}
,
numEnd =
function(msg)
{
# If we just do a grep("[0-9]@",  )
# we get matches on messages that have a From something like
# " \"marty66@aol.com\" <synjan@ecis.com>"
# and the marty66 is the "user's name" not the login
# So we can be more precise if we want.
x = names(msg$header)
if ( !( "From" %in% x) ) return(NA)
login = gsub("^.*<", "", msg$header["From"])
if ( is.null(login) )
login = gsub("^.*<", "", msg$header["X-From"])
if ( is.null(login) ) return(NA)
login = strsplit(login, "@")[[1]][1]
length(grep("[0-9]+$", login)) > 0
},
isYelling =
function(msg)
{
if ( "Subject" %in% names(msg$header) ) {
el = gsub("[^[:alpha:]]", "", msg$header["Subject"])
if (nchar(el) > 0) nchar(gsub("[A-Z]", "", el)) < 1
else FALSE
}
else
NA
},
forwards =
function(msg)
{
x = msg$body
if(length(x) == 0 || sum(nchar(x)) == 0)
return(NA)
ans = length(grep("^[[:space:]]*>", x))
100 * ans / length(x)
},
isOrigMsg =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("^[^[:alpha:]]*original[^[:alpha:]]+message[^[:alpha:]]*$",
tolower(x) ) ) > 0
},
isDear =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("^[[:blank:]]*dear +(sir|madam)\\>",
tolower(x))) > 0
},
isWrote =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("(wrote|schrieb|ecrit|escribe):", tolower(x) )) > 0
},
avgWordLen =
function(msg)
{
txt = paste(msg$body, collapse = " ")
if(length(txt) == 0 || sum(nchar(txt)) == 0) return(0)
txt = gsub("[^[:alpha:]]", " ", txt)
words = unlist(strsplit(txt, "[[:blank:]]+"))
wordLens = nchar(words)
mean(wordLens[ wordLens > 0 ])
}
,
numDlr =
function(msg)
{
x = paste(msg$body, collapse = "")
if(length(x) == 0 || sum(nchar(x)) == 0)
return(NA)
nchar(gsub("[^$]","", x))
}
)
#--------------
SpamCheckWords =
c("viagra", "pounds", "free", "weight", "guarantee", "million",
"dollars", "credit", "risk", "prescription", "generic", "drug",
"financial", "save", "dollar", "erotic", "million", "barrister",
"beneficiary", "easy",
"money back", "money", "credit card")
getMessageRecipients =
function(header)
{
c(if("To" %in% names(header))  header[["To"]] else character(0),
if("Cc" %in% names(header))  header[["Cc"]] else character(0),
if("Bcc" %in% names(header)) header[["Bcc"]] else character(0)
)
}
emailDF = createDerivedDF(emailStruct)
View(emailDF)
summary(emailDF$subSpamWords)
SpamCheckWords =
c('#1','100%','100% free','100% satisfied','50% off','Ad','All New','Bargain','Best Price','Bonus','Brand New',
'Pager','Claims not to be selling anything','Cost','Costs','Credit','Discount','Don’t delete','Email harvest',
'Email marketing','F r e e','Fast cash','For free','For instant access','For just $xxx','For just $yyy',
'For only','For you','Free','Free and free','Free consultation','Free dvd','Free gift','Free sample',
'Free trial','Free website','Gift certificate','Give it away','Giving away','Giving it away','Great',
'Great offer','Incredible deal','Insurance','Internet market','Internet marketing','It’s effective',
'Lower interest rate','Lowest interest rate','Lowest insurance rates','Lowest price','Luxury','Luxury car',
'Mortgage','Mortgage rates','Name Brand','New domain extensions','One hundred percent free',
'Outstanding values','Please read','Prize','Prizes','Profits','Promise','Promise you','Sale','Sales','Sample',
'Satisfaction','Satisfaction guaranteed','Stainless Steel','Stuff on sale','The best rates','We hate spam',
'Web traffic','Will not believe your eyes','Accept credit cards','Accordingly','As seen on','Avoid',
'Cannot be combined with any other offer','Check','Check or money order','Click','Click Below','Click Here',
'Click to remove','Compete for your business','Deal','Debt','Direct email','Direct marketing','Do it today',
'Don’t hesitate','Form','Free access','Free instant','Full refund','Investment','Investment decision','Life',
'Life insurance','Lifetime','Mail in order form','Month trial offer','Never','Not junk','Not spam','Notspam',
'Now','Obligation','Offers','One time mailing','Only','Only $','Open','Opt-in','Order','Order now',
'Order','shipped by','Order status','Order today','Orders shipped by','Pennies a day','Per day','Per week','Phone','Presently','Price','Prices','Print form signature','Print out and fax','Priority mail',
'Produced and sent out','Purchase','Quote','Rates','Refund','Regarding','Removal','Removal instructions',
'Remove','Save up to','Serious only','Shopper','Sign up free today','Solution','Strong buy','Subscribe',
'Take action','Tack action now','Tells you it’s an ad','Terms and conditions','The following form',
'Trial','Trial unlimited','Unlimited','Unlimited trial','What are you waiting for?','What’s keeping you?',
'Nl1Unsubscribe','Visit our website','Act Now','Act Now!','Action','Apply now','Apply online','Buy',
'Buy Direct','Buying judgements','Call','Call free','Call now','Can’t live without','Clearance',
'Drastically reduced','Exclusive deal','Expire','Get','Get it now','Get started now','Here',
'Important information','Important information regarding','Instant','Limited','Limited time',
'Limited time offer','Limited time only','New customers only','Now only','Offer expires','Once in a lifetime',
'Once in lifetime','One time','One-time','Serious','Special promotion','Supplies','Supplies are limited',
'This won’t last','Time limited','Urgent','While supplies last','4u','Acceptance','Access','Avoid Bankruptcy',
'Being a member','Boss','Bulk Email','Cancel','Cancel at any time','Card accepted','Cards accepted',
'Cents on the dollar','Certified','Chance','Cheap,','Compare','Compare rates','Congratulations',
'Credit card offers','Cures','Cures baldness','Dear [email/friend/somebody]','Dear friend','Dormant',
'Easy terms','Expect to earn','Free grant money','Free hosting','Free info','Free installation',
'Free membership','Freedom','Friend','Get out of debt','Have you been turned down?','Guarantee','Guaranteed',
'Hello','Info you requested','Information you requested','Join millions','Join millions of Americans',
'Marketing','Marketing solutions','Mass email','Member','Member stuff','No age restrictions','No claim forms',
'No experience','No inventory','No investment','No medical exams','No middleman','No obligation',
'No purchase necessary','No questions asked','Offer','One hundred percent guaranteed','Opportunity',
'Pre-approved','Save $','Save big money','Save money','See for yourself','Success','Thousands','We honor all',
'Win','Winner','Winning','Won','You are a winner!','You have been selected!','You’re a winner!',
'Additional Income','All Natural','Amazing','Amazing stuff','Be Amazed','Be your own boss','Big Bucks',
'Billion','Billion Dollars','Cash','Cash bonus','Cashcashcash','Consolidate debt and credit',
'Consolidate your debt','Double your','Double your cash','Double your income','Earn','Earn $','Earn Cash',
'Earn extra cash','Earn per week','Eliminate bad credit','Eliminate debt','Explode your business','Extra',
'Extra cash','Extra income','Fantastic','Fantastic deal','Financial freedom','Financially independent',
'Free investment','Free leads','Free money','Free offer','Free preview','Free priority mail','Free quote',
'Get paid','Home','Home based','Home based business','Home employment','Homebased business',
'If only it were that easy','Income','Income from home','Increase sales','Increase traffic',
'Increase your sales','Lose','Lose weight','Lose weight spam','Lower monthly payment',
'Lower monthly payments','Lower your mortgage rate','Make $','Make money','Million','Million dollars',
'Money back','Money making','More internet traffic','Multi level marketing','Multilevel marketing','No catch',
'No cost','No credit check','No disappointment','No fees','No gimmick','No gimmicks','No hidden',
'No hidden costs','No interest','No interests','No selling','No strings attached','No obligation',
'Online biz opportunity','Performance','Potential earnings','Pure Profit','Pure profits','Real thing',
'Removes wrinkles','Reverses','Reverses aging','Risk free','Serious cash','Stop','Stop snoring',
'They’re just giving it away','Vacation','Vacation offers','Weekend getaway','Weight','Weight loss',
'While you sleep','Why pay more?','Work at home','Work from home','Addresses','Addresses on cd',
'Auto email removal','Beneficiary','Beverage','Billing','Billing Address','Cable Converter',
'Calling creditors','Casino','Celebrity','Cell phone cancer scam','They make a claim or claims that they in accordance with spam law','Claims to be legal','Collect child support','Confidentiality on all orders',
'Copy accurately','Copy dvds','Credit bureaus','Diagnostics','Dig up dirt on friends','Fast Viagra delivery',
'Free cell phone','Hidden','Hidden assets','Hidden charges','Human growth hormone','In accordance with laws',
'Junk','Laser printer','Leave','Legal','Loan','Loans','Long distance phone number','Medicine','Medium',
'Meet singles','Message contains','Message contains disclaimer','Miracle','Mlm','Money','Nigerian',
'Off shore','Offshore','Online degree','Online marketing','Online pharmacy','Orders shipped by shopper',
'Passwords','Problem','Refinance','Refinance home','Request','Requires initial investment','Reserves the right',
'Rolex','Safeguard notice','Score','Score with babes','Search engine listings','Search engines','Section 301',
'Sent in compliance','Shopping spree','Social security number','Spam','Stock alert','Stock disclaimer statement',
'Stock pick','Subject to cash','Subject to credit','Talks about hidden charges','Teen','Terms',
'They try to keep your money, no refund','This isn’t spam','This isn’t junk','Undisclosed recipient',
'University diplomas','Unsecured credit','Unsecured debt','Unsolicited','U.S. dollars','Valium','Viagra',
'Vicodin','The email asks for a credit card','Warranty','Who really wins?','Wife','Xanax','Your income')
emailDF = createDerivedDF(emailStruct)
summary(emailDF$subSpamWords)
minSplits = c(seq(1,20,1))
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals,minSplits, function(x,y) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=y) )
q
}
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals,minSplits, function(x,y) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=y) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
# Creating a list of complexity Values to be used in rpart() function,
# to see if it improves performance
complexityVals = c(seq(0.00001, 0.0001, length=19),
seq(0.0001, 0.001, length=19),
seq(0.001, 0.005, length=9),
seq(0.005, 0.01, length=9))
seq(0.005, 0.01, length=9))
minSplits = c(seq(1,20,2))
minSplits = c(seq(1,20,2))
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
minSplits = c(seq(2,20,2))
complexityVals = c(seq(0.00001, 0.0001, length=19),
seq(0.0001, 0.001, length=19),
seq(0.001, 0.005, length=9),
seq(0.005, 0.01, length=9))
minSplits = c(seq(2,20,2))
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals,minSplits, function(x,y) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=y) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(minSplits, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(minsplit=x) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
# We assign Type I and Type II error rates on the rpartObj
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
dim(errs) #[1]  2 56
head(errs[,1:10])
library(RColorBrewer)
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(errs[1,] ~ complexityVals, type="l", col=cols[2],
lwd = 2, ylim = c(0,0.2), xlim = c(0,0.005),
ylab="Error", xlab="complexity parameter values")
points(errs[2,] ~ complexityVals, type="l", col=cols[1], lwd = 2)
text(x =c(0.003, 0.0035), y = c(0.12, 0.05),
labels=c("Type II Error", "Type I Error"))
minI = which(errs[1,] == min(errs[1,]))[1]
abline(v = complexityVals[minI], col ="grey", lty =3, lwd=2)
text(0.0007, errs[1, minI]+0.01,
formatC(errs[1, minI], digits = 2))
text(0.0007, errs[2, minI]+0.01,
formatC(errs[2, minI], digits = 3))
library(RColorBrewer)
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(errs[1,] ~ minSplits, type="l", col=cols[2],
lwd = 2, ylim = c(0,0.2), xlim = c(0,0.005),
ylab="Error", xlab="complexity parameter values")
points(errs[2,] ~ complexityVals, type="l", col=cols[1], lwd = 2)
text(x =c(0.003, 0.0035), y = c(0.12, 0.05),
labels=c("Type II Error", "Type I Error"))
minI = which(errs[1,] == min(errs[1,]))[1]
abline(v = complexityVals[minI], col ="grey", lty =3, lwd=2)
text(0.0007, errs[1, minI]+0.01,
formatC(errs[1, minI], digits = 2))
text(0.0007, errs[2, minI]+0.01,
formatC(errs[2, minI], digits = 3))
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals,minSplits, function(x,y) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(c(cp=x,minsplit=y)) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=seq(2,20,2)) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=c(seq(2,20,2))) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
# We assign Type I and Type II error rates on the rpartObj
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
dim(errs) #[1]  2 56
head(errs[,1:10])
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=2) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
# We assign Type I and Type II error rates on the rpartObj
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
dim(errs) #[1]  2 56
head(errs[,1:10])
library(RColorBrewer)
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(errs[1,] ~ complexityVals, type="l", col=cols[2],
lwd = 2, ylim = c(0,0.2), xlim = c(0,0.005),
ylab="Error", xlab="complexity parameter values")
points(errs[2,] ~ complexityVals, type="l", col=cols[1], lwd = 2)
text(x =c(0.003, 0.0035), y = c(0.12, 0.05),
labels=c("Type II Error", "Type I Error"))
minI = which(errs[1,] == min(errs[1,]))[1]
abline(v = complexityVals[minI], col ="grey", lty =3, lwd=2)
text(0.0007, errs[1, minI]+0.01,
formatC(errs[1, minI], digits = 2))
text(0.0007, errs[2, minI]+0.01,
formatC(errs[2, minI], digits = 3))
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=c(2,4)) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
# We assign Type I and Type II error rates on the rpartObj
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
dim(errs) #[1]  2 56
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=list(2,4)) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
minSplits = c(2,4)
fits = lapply(complexityVals,minSplits, function(x,y) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=y) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
comp = c(.00001,.0001)
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=comp) )
# the different complexity values
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=comp) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
# We assign Type I and Type II error rates on the rpartObj
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
dim(errs) #[1]  2 56
head(errs[,1:10])
# Use lapply to create a list of rpart objects, using trainDF, and using
# the different complexity values
fits = lapply(comp, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=comp) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
# We assign Type I and Type II error rates on the rpartObj
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
dim(errs) #[1]  2 56
head(errs[,1:10])
errs
comp2 = c(10,5)
fits = lapply(comp,comp2, function(x,y) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x,minsplit=y) )
# using predict() on the testDF, using the rpart objects
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
comp = c(3,4,5)
comp2 = c(11,13,15)
fits = lapply(comp,comp2, function(x,y) {
print(x,y)
})
comp = list(x=c(3,4,5),y= c(11,13,15)
fits = lapply(comp, function(x) {
print(x)
})
comp = list(x=c(3,4,5),y= c(11,13,15))
fits = lapply(comp, function(x) {
print(x)
})
comp = list(z=c(3,4,5),y= c(11,13,15))
fits = lapply(comp, function(x) {
print(x)
})
comp = list(z=c(3,4,5),y= c(11,13,15))
fits = mapply(comp, function(x) {
print(x)
})
fits = lapply(comp, function(x) {
print(x)
})
fits = lapply(comp, function(x) {
print(x^2)
})
comp = list(x=c(3,4,5))
comp2 = list(y= c(11,13,15))
fits = lapply(comp,comp2 function(x,y) {
print(x^2,y^2)
})
