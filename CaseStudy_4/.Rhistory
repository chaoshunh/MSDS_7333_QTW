library(XML)
ubase = "http://www.cherryblossom.org/"
menURLs =
c("results/1999/cb99m.html", "results/2000/Cb003m.htm", "results/2001/oof_m.html",
"results/2002/oofm.htm", "results/2003/CB03-M.HTM",
"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
extractResTable =
# Retrieve data from web site, find preformatted text,
# return as a character vector.
function(url)
{
doc = htmlParse(url)
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
# to be appended to for each subsequent year
ubase = "http://www.cherryblossom.org/"
menURLs =
c("results/1999/cb99m.html", "results/2000/Cb003m.htm", "results/2001/oof_m.html",
"results/2002/oofm.htm", "results/2003/CB03-M.HTM",
"results/2004/men.htm", "results/2005/CB05-M.htm",
"results/2006/men.htm", "results/2007/men.htm",
"results/2008/men.htm", "results/2009/09cucb-M.htm",
"results/2010/2010cucb10m-m.htm",
"results/2011/2011cucb10m-m.htm",
"results/2012/2012cucb10m-m.htm")
# Recreate urls for Men's race results
urls = paste(ubase, menURLs, sep = "")
# Extract Men's results from website for years 1999:2012
menTables = lapply(urls, extractResTable)
names(menTables) = 1999:2012 # Naming each lists according to its year
#typeof(menTables)
sapply(menTables, length) # List of characters for each year. Appears to be errors
# for years 1999, 2000, and 2009
# ------ extractResTable() Version B-------
# Modified for yr 2000 anomaly
extractResTable =
# Retrieve data from web site,
# find the preformatted text,
# and return as a character vector.
function(url, year = 1999)
{
doc = htmlParse(url)
if (year == 2000) {
# Get text from 4th font element
# File is ill-formed so <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
}
else {
preNode = getNodeSet(doc, "//pre")
txt = xmlValue(preNode[[1]])
}
els = strsplit(txt, "\r\n")[[1]]
return(els)
}
years = 1999:2012
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt'))
}
menTables = mapply(extractResTable, url = urls, year = years, file = NULL)
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
sapply(menTables, length)
head(menTables$`2009`,15)
library(changepoint)
set.seed(10)
m.data <- c(rnorm(100,0,1),rnorm(100,1,1),rnorm(100,0,1),rnorm(100,0.2,1))
ts.plot(m.data,xlab='Index')
m.pelt <- cpt.mean(m.data, method = 'PELT',penalty = 'SIC0')
plot(m.pelt,type="l",cpt.col='blue',xlab='Index',cpt.width = 4)
cpts(m.pelt)
m.binseg <- cpt.mean(m.data,method= 'BinSeg',penalty = 'SIC0')
plot(m.binseg,type='l',xlab='Index',cpt.width=4)
cpts(m.binseg)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url,encoding = Ã‚)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt'))
}
#-
menTables = mapply(extractResTable, url = urls, year = years)
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt',fileEncoding = "UTF-8"))
}
years = 1999:2012 # Added years argument to function call to identify year being parsed
# Switch to Matrix mapply because we are using multiple fuctions to parse data from web.
# also added 'file' argument to do 2 things, identify if we want to store results in .txt format
# and what subdirectory should the data be placed in. file=NULL means no file is created.
# NOTE: Directory must exists prior to executing code. ####
menTables = mapply(extractResTable, url = urls, year = years, file = 'MenTxt')
findColLocs = function(spacerRow) {
spaceLocs = gregexpr(" ", spacerRow)[[1]]
rowLength = nchar(spacerRow)
if (substring(spacerRow, rowLength, rowLength) != " ")
return( c(0, spaceLocs, rowLength + 1))
else return(c(0, spaceLocs))
}
selectCols =
function(colNames, headerRow, searchLocs)
{
sapply(colNames,
function(name, headerRow, searchLocs)
{
startPos = regexpr(name, headerRow)[[1]] # Returns a -1 if regexpr does not match the
# name with a value in the headerRow (matches variable
# to header row value, if not there, does not
# populate variable)
if (startPos == -1)
return( c(NA, NA) )
index = sum(startPos >= searchLocs)
c(searchLocs[index] + 1, searchLocs[index + 1] - 1)
},
headerRow = headerRow, searchLocs = searchLocs )
}
extractVariables =
function(file, varNames =c("name", "home", "ag", "gun",
"net", "time"))
{
# Find the index of the row with =s
eqIndex = grep("^===", file)
# Extract the two key rows and the data
spacerRow = file[eqIndex]
headerRow = tolower(file[ eqIndex - 1 ])
body = file[ -(1 : eqIndex) ]
# Obtain the starting and ending positions of variables
searchLocs = findColLocs(spacerRow)
locCols = selectCols(varNames, headerRow, searchLocs)
Values = mapply(substr, list(body), start = locCols[1, ],
stop = locCols[2, ])
colnames(Values) = varNames
# returns values variable
invisible(Values)
}
#--------------
mfilenames = paste("MenTxt/", 1999:2012, ".txt", sep = "") #Creating Path
menFiles = lapply(mfilenames, readLines) # Reading lines of the 14 .txt files as character vector and
# creating a list of Char vectors(one for each row in txt file),
#  storiing them in menFiles
names(menFiles) = 1999:2012 # Naming list
sapply(menFiles, length)
menResMat = lapply(menFiles, extractVariables)
length(menResMat) # List of 14 character vector Matrices 1999:2012
ac<-menResMat['1999']
typeof(ac)
ac$`1999`[2,'home']
# Determine the number of observations per character vector Matrices
sapply(menResMat, nrow)
# 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012
# 3190 3017 3622 3724 3948 4156 4327 5237 5276 5905 6651 6911 7011 7193
# in a matrix, we have to extract it from the matrix before converting)
age = sapply(menResMat,
function(x) as.numeric(x[ , 'ag']))
#------- Figure 2.4 - Boxplot Ages by yr ----
# Problems identified through the use of boxplots 2003,2006
pdf("./Figures/FIg_2.4_CB_BoxplotAgeByYr.pdf", width = 8, height = 5)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
boxplot(age, ylab = "Age", xlab = "Year")
par(oldPar)
dev.off()
#-----
dev.off()
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt'),fileEncoding = "UTF-8")
}
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt'),fileEncoding = "UTF-8")
}
years = 1999:2012 # Added years argument to function call to identify year being parsed
# Switch to Matrix mapply because we are using multiple fuctions to parse data from web.
# also added 'file' argument to do 2 things, identify if we want to store results in .txt format
# and what subdirectory should the data be placed in. file=NULL means no file is created.
# NOTE: Directory must exists prior to executing code. ####
menTables = mapply(extractResTable, url = urls, year = years, file = 'MenTxt')
#
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt'),useBytes = TRUE)
}
years = 1999:2012 # Added years argument to function call to identify year being parsed
# Switch to Matrix mapply because we are using multiple fuctions to parse data from web.
# also added 'file' argument to do 2 things, identify if we want to store results in .txt format
# and what subdirectory should the data be placed in. file=NULL means no file is created.
# NOTE: Directory must exists prior to executing code. ####
menTables = mapply(extractResTable, url = urls, year = years, file = 'MenTxt')
mfilenames = paste("MenTxt/", 1999:2012, ".txt", sep = "") #Creating Path
menFiles = lapply(mfilenames, readLines) # Reading lines of the 14 .txt files as character vector and
# creating a list of Char vectors(one for each row in txt file),
#  storiing them in menFiles
names(menFiles) = 1999:2012 # Naming list
sapply(menFiles, length)
menResMat = lapply(menFiles, extractVariables)
length(menResMat) # List of 14 character vector Matrices 1999:2012
ac<-menResMat['1999']
typeof(ac)
ac$`1999`[2,'home']
# Determine the number of observations per character vector Matrices
sapply(menResMat, nrow)
age = sapply(menResMat,
function(x) as.numeric(x[ , 'ag']))
# NOTE: Waring messages means that some values could not be converted to numeric, resulting in NA values
#       Warning messages:
#         1: In FUN(X[[i]], ...) : NAs introduced by coercion (x4)
#------- Figure 2.4 - Boxplot Ages by yr ----
# Problems identified through the use of boxplots 2003,2006
pdf("./Figures/FIg_2.4_CB_BoxplotAgeByYr.pdf", width = 8, height = 5)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
boxplot(age, ylab = "Age", xlab = "Year")
par(oldPar)
dev.off()
#-----
extractResTable =
#
# Retrieve data from web site,
# find the preformatted text,
# and write lines or return as a character vector.
#
function(url = "http://www.cherryblossom.org/results/2009/09cucb-F.htm",
year = 1999, sex = "male", file = NULL)
{
doc = htmlParse(url)
if (year == 1999) {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\n")[[1]]  #Line ends with \n
}
else if (year == 2000) {
# Get preformatted text from 4th font element
# The top file is ill formed so the <pre> search doesn't work.
ff = getNodeSet(doc, "//font")
txt = xmlValue(ff[[4]])
els = strsplit(txt, "\r\n")[[1]]
}
else if (year == 2009 & sex == "male") {
# Get preformatted text from <div class="Section1"> element
# Each line of results is in a <pre> element
div1 = getNodeSet(doc, "//div[@class='Section1']")
pres = getNodeSet(div1[[1]], "//pre")
els = sapply(pres, xmlValue)
}
else {
# Get preformatted text from <pre> elements
pres = getNodeSet(doc, "//pre")
txt = xmlValue(pres[[1]])
els = strsplit(txt, "\r\n")[[1]]
}
if (is.null(file)) return(els)
path <- paste0('./',file) # path base is current_path
# Checking to see if data file path exists, if not, it creates it
if (dir.exists(path) == FALSE){ dir.create(path,recursive = TRUE)}
# Write the lines as a text file, in proper subdirectory (MenTxt or WomenTxt)
writeLines(els, con = paste0(path,'/',year,'.txt'))
}
years = 1999:2012 # Added years argument to function call to identify year being parsed
# Switch to Matrix mapply because we are using multiple fuctions to parse data from web.
# also added 'file' argument to do 2 things, identify if we want to store results in .txt format
# and what subdirectory should the data be placed in. file=NULL means no file is created.
# NOTE: Directory must exists prior to executing code. ####
menTables = mapply(extractResTable, url = urls, year = years, file = 'MenTxt')
menTables = mapply(extractResTable, url = urls, year = years)
names(menTables) = years
head(menTables$`2009`,15)
