pdf("./Figures/Fig_2.6_CB_Overplot.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(runTime ~ age, data = cbMen, ylim = c(40, 180),
xlab = "Age (years)", ylab = "Run Time (minutes)")
par(oldPar)
dev.off()
#----
# To improve the appearance of graphics(colors), we will load the RColorBrewer package
library(RColorBrewer)
ls("package:RColorBrewer")
display.brewer.all()
Purples8 = brewer.pal(9, "Purples")[8] # Selecting the 8 color in the Purple pallett
Purples8 # RGB hex code for the color: #54278F   54 Red, 27 Blue, 8F Green
Purples8A = paste(Purples8, "14", sep = "") # appending the Alpha value to the RGB value, for transparency
#------- Figure 2.7 - ScatterPlot Age vs Run Time (Men)----
# Improved graphics for view of men's data, using colors, transparency,
# reduced symbol size and shape, and add jitter to age
pdf("./Figures/Fig_2.7_CB_OverplotTransparent.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(runTime ~ jitter(age, amount = 0.5),
data = cbMen,
pch = 19,cex = 0.25, col = Purples8A,
ylim = c(45, 165), xlim = c(15, 85),
xlab = "Age (years)", ylab = "Run Time (minutes)")
par(oldPar)
dev.off()
#-----
#?smoothScatter()
#?colorRampPalette()
#------- Figure 2.8 - ScatterPlot Age vs Run Time (Men)----
# Improved graphics for view of men's data, using smoothScatter(),
# color is determined by density of data points within a small region
# around that point. 2D kernel density
pdf("./Figures/FIg_2.8_CB_SmoothScatter.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
smoothScatter(y = cbMen$runTime, x = cbMen$age,
ylim = c(40, 165), xlim = c(15, 85),
colramp = colorRampPalette(c("ivory", Purples8A)),
xlab = "Age (years)", ylab = "Run Time (minutes)")
par(oldPar)
dev.off()
#-----
# Extracting Men's run times (>30min) and runner's age (>15)
cbMenSub = cbMen[cbMen$runTime > 30 &
!is.na(cbMen$age) & cbMen$age > 15, ]
max(cbMenSub$age)
# Creating Age categories for runners [15:75] in 10yr steps and max Age
ageCat = cut(cbMenSub$age, breaks = c(seq(15, 75, 10), max(cbMenSub$age)))
# (15,25] (25,35] (35,45] (45,55] (55,65] (65,75] (75,89]
# 5804   25432   20535   12212    5001     751      69
table(ageCat) # Creating a table of age categories
#------- Figure 2.9 - BoxPlot Run Time by Age Grouping (Men)----
#
pdf("./Figures/Fig_2.9_CB_Boxplots.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(cbMenSub$runTime ~ ageCat,
xlab = "Age (years)", ylab = "Run Time (minutes)")
par(oldPar)
dev.off()
#-----
# Creation of a linear model for the runtime vs age data
lmAge = lm(runTime ~ age, data = cbMenSub)
lmAge$coefficients
#Linear Model Coefficients
# (Intercept)         age
# 78.757076    0.225285
summary(lmAge)
# Call:
#   lm(formula = runTime ~ age, data = cbMenSub)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -40.333 -10.221  -0.952   9.103  82.425
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept) 78.75708    0.20771  379.17   <2e-16 ***
#   age          0.22529    0.00517   43.58   <2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 14.77 on 69802 degrees of freedom
# Multiple R-squared:  0.02648,	Adjusted R-squared:  0.02647
# F-statistic:  1899 on 1 and 69802 DF,  p-value: < 2.2e-16
class(lmAge) # "lm"
# To access how well the lm model fits the data, wer will plot the residuals
# versus age
#------- Figure 2.10 - Linerar Model Residual scatter Plot with overlays(Men)----
# Smoothed Scatter plot; Includes horizontal line overlay at y=0 and local smooth polynomial
# fitted line of residuals (for the fit at point x, the fit is made using points
# in a neighbourhood of x, weighted by their distance from x)these have tricubic
# weighting (proportional to (1 - (dist/maxdist)^3)^3)
pdf("./Figures/Fig_2.10_CB_ResidSimpleLM.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
smoothScatter(x = cbMenSub$age, y = lmAge$residuals,
xlab = "Age (years)", ylab = "Residuals",
colramp = colorRampPalette(c("ivory", Purples8A)))
abline(h = 0, col = "darkred", lwd = 3) # Horizontal line y=0
# Local weighted averages of the residuals. Contains fitted values
# for the local weighted avg of residuals
resid.lo = loess(resids ~ age,
data = data.frame(resids = residuals(lmAge),
age = cbMenSub$age))
#?loess()
age20to80 = 20:80
# Using the values of the locally weighted residuals (redid.lo),
# then using predict() function to predict the loess value for each
# age. Thus, creating a dataframe of predicted loess of residuals vs age
resid.lo.pr =
predict(resid.lo, newdata = data.frame(age = age20to80)) # Predictions of value of line
# Creating a line using the resid.lo.pr values
lines(x = age20to80, y = resid.lo.pr, col = "green", lwd = 2)
par(oldPar)
dev.off()
#--------
# It appears that a simple linear model tends to underestimate the finish times for male
# runners over the age of 60
##--------------------------------------------------------
# Since linear model is not an ideal predictor for this dataset, we want to switch
# gears somewhat and attempt to find another solution the better models the dataset
# 2 options are:
# A) Piecewise Linear function
# B) Loess Curve
##------------------------------------
# To investigate these 2 options, we will the two models vs runner's age
####### Loess Curve
# Calculate the locally weighted average for the runner's time by age
menRes.lo = loess(runTime ~ age, cbMenSub)
# Using the values of the locally weighted run times (menRes.lo),
# then using predict() function to predict the loess value for each
# age. Thus, creating a dataframe of predicted loess run times vs age
menRes.lo.pr = predict(menRes.lo, data.frame(age = age20to80))
####### Piecewise Liner Model
#-------- Sample code for testing purposes --------
#Creating a piecewise LM segment from 50+ yo runners
#Determine if runner was over 50, if so, by how many years
over50 = pmax(0, cbMenSub$age - 50) # takes maximum value of age-50 or 0, produces a vector
# Create a linear model of runners over age of 50
lmOver50 = lm(runTime ~ age + over50, data = cbMenSub)
summary(lmOver50)
# From the summary, formula (a - 50c) + (b+c)age
#  a = 82.75
#  b = 0.105 slope of line
#  c = 0.563 change in slope after 50 yrs old
# so, for every year above 50, times increase by 0.67 minutes a year
# before 50, time decrease by 0.106 minutes for every year below 50
# Call:
#   lm(formula = runTime ~ age + over50, data = cbMenSub)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -40.265 -10.099  -0.881   9.061  79.044
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept) 82.755465   0.265049  312.23   <2e-16 ***
#   age          0.105681   0.007147   14.79   <2e-16 ***
#   over50       0.563889   0.023372   24.13   <2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 14.71 on 69801 degrees of freedom
# Multiple R-squared:  0.03453,	Adjusted R-squared:  0.03451
# F-statistic:  1248 on 2 and 69801 DF,  p-value: < 2.2e-16
#########
#Creating a piecewise LM segments from 30+ yo runners, in increments of 10 yrs
decades = seq(30, 60, by = 10) # Creating decades vector
# Creating 4 vectors (one for each decade) and subtracting the runner's age from value
overAge = lapply(decades,
function(x) pmax(0, (cbMenSub$age - x)))
names(overAge) = paste("over", decades, sep = "")
overAge = as.data.frame(overAge)
tail(overAge)
#         over30  over40 over50 over60
# 69799     36     26     16      6
# 69800     11      1      0      0
# 69801      9      0      0      0
# 69802     26     16      6      0
# 69803      5      0      0      0
# 69804     18      8      0      0
#By comparison, Ages of last 6 runners in dataset
# 66
# 41
# 39
# 56
# 35
# 48
# Creating a piecewise linear model with breaks at 30,40,50,60 yr age vs runTime
lmPiecewise = lm(runTime ~ . ,
data = cbind(cbMenSub[, c("runTime", "age")],
overAge))
summary(lmPiecewise)
# Residuals:
#   Min      1Q  Median      3Q     Max
# -40.921 -10.119  -0.885   9.023  78.965
#
# Coefficients:
#               Estimate    Std. Error  t value   Pr(>|t|)
# (Intercept)    74.227662  0.915265  81.100  < 2e-16 ***
#   age          0.424331   0.033208  12.778  < 2e-16 ***
#   over30      -0.477114   0.047779  -9.986  < 2e-16 ***
#   over40       0.221650   0.040667   5.450 5.04e-08 ***
#   over50       0.494407   0.052933   9.340  < 2e-16 ***
#   over60      -0.003592   0.077656  -0.046    0.963
# ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 14.7 on 69798 degrees of freedom
# Multiple R-squared:  0.03593,	Adjusted R-squared:  0.03586
# F-statistic: 520.3 on 5 and 69798 DF,  p-value: < 2.2e-16
##########################################################
#########################################################
##### STOPPING POINT
#####
# When we want to plot the piecewise linear funtion, we need to
# invoke the predict() function, to provide the fitted values for
# each age value (20-80). We first need to create a dataframe with
# all the covariates (ie. dataframe for each age in range).
# so predict can use these values in its predictions
overAge20 = lapply(decades, function(x) pmax(0, (age20to80 - x)))
names(overAge20) = paste("over", decades, sep = "")
overAgeDF = cbind(age = data.frame(age = age20to80), overAge20)
head(overAgeDF,5)
# age over30 over40 over50 over60
# 1  20      0      0      0      0
# 2  21      0      0      0      0
# 3  22      0      0      0      0
# 4  23      0      0      0      0
# 5  24      0      0      0      0
tail(overAgeDF,5)
# age over30 over40 over50 over60
# 57  76     46     36     26     16
# 58  77     47     37     27     17
# 59  78     48     38     28     18
# 60  79     49     39     29     19
# 61  80     50     40     30     20
# Calling predict function, using results of previous lmPiecewise function
# and the 'standard' overAgeDF covariates DF
predPiecewise = predict(lmPiecewise, overAgeDF)
#------- Figure 2.11 - Piecewise Linear & Loess Model RunTime vs Age (Men)----
# Piecewise linear with inflection points at 30,40,50,60 yrs
pdf("./Figures/Fig_2.11_CB_PiecewiseLoessCurves.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(predPiecewise ~ age20to80,
type = "l", col = "#984ea3", lwd = 3,
#   type = "l", col = "purple", lwd = 2,
xlab = "Age (years)", ylab = "Run Time Prediction")
lines(x = age20to80, y = menRes.lo.pr,
col = "#4daf4a", lwd = 3, lty = 2)
legend("topleft", col = c("#984ea3", "#4daf4a"), lty = c(1, 2), lwd = 3,
legend = c("Piecewise Linear", "Loess Curve"), bty = "n")
par(oldPar)
dev.off()
#------
#------- Figure 2.12 - Number of Runners by Year (Men)----
# To get a feeling of how participation varies over the years
pdf("./Figures/Fig_2.12_CB_NumRunnersLinePlot.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
numRunners = with(cbMen, tapply(runTime, year, length))
plot(numRunners ~ names(numRunners), type="l", lwd = 2,
xlab = "Years", ylab = "Number of Runners")
par(oldPar)
dev.off()
#------
# Comparing the performance between earliest and latest years (Men)
# Note: World record time: 44:24
summary(cbMenSub$runTime[cbMenSub$year == 1999])
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 46.98   74.82   84.29   84.35   93.06  170.83
summary(cbMenSub$runTime[cbMenSub$year == 2012])
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 45.25   77.57   87.47   88.44   97.78  150.98
# The min time has dropped but the 1stQTR Med and 3rdQTR have increased through the years.
# Could this be because the average age had increased and/or make-up of runners has changed (pro vs recreational)
#------- Figure 2.13 - Age Density comparison 1999 vs 2012 by Year (Men)----
# To get a feeling of how age of participation varies between 1999 & 2012
pdf("./Figures/Fig_2.13_CB_AgeDensity99vs12.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
age1999 = cbMenSub[ cbMenSub$year == 1999, "age" ]
age2012 = cbMenSub[ cbMenSub$year == 2012, "age" ]
plot(density(age1999, na.rm = TRUE),
ylim = c(0, 0.05), col = "purple",
lwd = 3,  xlab = "Age (years)",  main = "")
lines(density(age2012, na.rm = TRUE),
lwd = 3, lty = 2, col="green")
legend("topleft", col = c("purple", "green"), lty= 1:2, lwd = 3,
legend = c("1999", "2012"), bty = "n")
par(oldPar)
dev.off()
#-----
# The results of the grpah show something peculiar.  The age density for 2012 shows that
# there were more younger runners than in 1999.  Which should have produced lower statistics
# for 2012 vs 1999 (Younger runners run faster...).  This must mean that the demographics of
# the runners has changed (less pro racers vs amatures????)
# ------ QQ Plot age of Male racers yr 1999 vs 2012----- NOT Plotted to PDF
qqplot(age1999, age2012, pch = 19, cex = 0.5,
ylim = c(10,90), xlim = c(10,90),
xlab = "Age in 1999 Race",
ylab = "Age in 2012 Race",
main = "Quantile-quantile plot of male runner's age")
abline(a =0, b = 1, col="red", lwd = 2)
#-------
#------- Figure 2.14 - Loess Model RunTime vs Age (Men) for yrs 1999 & 2012 only----
# Similar to Fig 2.11 but only looking at 2 year of data
mR.lo99 = loess(runTime ~ age, cbMenSub[ cbMenSub$year == 1999,])
mR.lo.pr99 = predict(mR.lo99, data.frame(age = age20to80))
mR.lo12 = loess(runTime ~ age, cbMenSub[ cbMenSub$year == 2012,])
mR.lo.pr12 = predict(mR.lo12, data.frame(age = age20to80))
pdf("./Figures/FIg_2.14_CB_Loess99vs12.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(mR.lo.pr99 ~ age20to80,
type = "l", col = "#984ea3", lwd = 3,
xlab = "Age (years)", ylab = "Prediction (minutes)")
lines(x = age20to80, y = mR.lo.pr12, col="#4daf4a", lty = 2, lwd = 3)
legend("topleft", col = c("#984ea3", "#4daf4a"), lty = 1:2, lwd = 3,
legend = c("1999", "2012"), bty = "n")
par(oldPar)
dev.off()
#-----
# Creating a variable quantifying the difference between Loess prediction
# modes for 1999 and 2012
gap14 = mR.lo.pr12 - mR.lo.pr99
#------- Figure 2.15 - Difference between Loess Model RunTime vs Age (Men) for yrs 1999 & 2012 only----
pdf("./Figures/Fig_2.15_CB_DifferenceInFittedCurves.pdf", width = 8, height = 6)
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(gap14 ~ age20to80, type = "l" , xlab = "Age (years)",
ylab = "Difference in Fitted Curves(2012 - 2009) (minutes)", lwd = 2)
par(oldPar)
dev.off()
# -----
# The Fig 2.15 graph shows that the finish times for 2012, for runners less than 50 yrs old were slower
# than those of 1999.  Does this mean that more amature runners are participating in the race vs the
# first few years?
#------- Figure NA - FastestMan by Age actual & Loess prediction----
pdf("./Figures/Fig_NA_FastestManLoessPredictedCurves.pdf", width = 8, height = 6)
# Determines fastest runner's time for each age using all years(men)
fastestMan = tapply(cbMenSub$runTime, cbMenSub$age, min, na.rm = TRUE)
# Example fastestMan
#  16        17        18        19 .....
# 55.91667  55.50000  56.16667  45.96667 ....
oldPar = par(mar = c(4.1, 4.1, 1, 1))
plot(fastestMan ~ names(fastestMan), type ="l", xlim = c(20, 90), col = 'blue')
ageFM = as.numeric(names(fastestMan)) #List of ages with fastestMan data
mR.loF = loess(fastestMan ~ ageFM) # Using FastestMan data to loess model, (only data is fastest for each
#  age )
mR.lo.prF = predict(mR.loF, data.frame(age = ageFM), se = FALSE) # Predicts the time for each year based on
# the loess model created from FastestMan dataset
# Sameple output of mR.lo.prF
# 1         2         3         4
#50.97034  50.43490  49.93866  49.48353
# Plotting loess prediction of FastestMan dataset
lines(x = ageFM, y = mR.lo.prF, col = "purple", lwd = 2)
legend("topleft", col = c("blue", "purple"), lty = 1:1, lwd = 3,
legend = c("Fastest Man", "Loess Predition"), bty = "n")
par(oldPar)
dev.off()
#------
timeNorm = cbMenSub$runTime / mR.lo.prF[as.character(cbMenSub$age)]
# mR.lo.prF (first 4 values) - predicted values of fastest runner for each age group
# 28       24       27       28         ....
# 52.23179 50.28427 51.77801 52.23179   ....
# cbMenSub[1:4,c('age','runTime')]
# Index    age    runTime
# 1999.1   28   46.98333
# 1999.2   24   47.01667
# 1999.3   27   47.05000
# 1999.4   28   47.11667
#
# timeNorm[1:4]
# 28        24        27        28
# 0.8995161 0.9350175 0.9086869 0.9020688
time99Norm = timeNorm[cbMenSub$year == 1999]
time12Norm = timeNorm[cbMenSub$year == 2012]
summary(time99Norm)
#   Min.    1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#  0.7285  1.2399  1.4056  1.4228  1.5908  2.5189       9
summary(time12Norm)
#   Min.    1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#  0.6967  1.3118  1.5126  1.5315  1.7255  2.7663      13
#------- Figure NA - Time Distribution of Runners vs predicted fastest time for each Age group ----
pdf("./Figures/Fig_NA_TimeDistribution_vs_PredictedFastestTimePerAgeGroup.pdf", width = 10, height = 6)
plot(density(100*time99Norm, na.rm = TRUE),
ylim = c(0, 0.016),
col = "purple",
lwd = 3,  xlab = "Time (percentage)",
main = "Time Distribution for 1999 and 2012 Runners\n Percentage of the fastest runner for that age")
lines(density(100*time12Norm, na.rm = TRUE),
lwd = 3, col = "green")
legend("topleft", fill = c("purple", "green"),
legend = c("1999", "2012"), bty = "n")
par(oldPar)
dev.off()
#-----
#------------------- Section 2.5 --------------------------------------------
#-------------------  Switching over to individuals runners across years ----
# Want to start tracking runners that participated in race more than 1
# year.  Will use name, age, and hometown to identify these individuals
# (Was no unique identifier supplied to each individual)
# start by trimming the blanks from the name variables
# Create a function that removes blanks at the beginning,
# end, and multiple blanks between first and last names
trimBlanks = function(charVector) {
nameClean = gsub("^[[:blank:]]+", "", charVector)# beginning
nameClean = gsub("[[:blank:]]+$", "", nameClean) # end
nameClean = gsub("[[:blank:]]+", " ", nameClean) #multiple between, replaced with 1 blank
}
# Create a vector of cleaned names
nameClean = trimBlanks(cbMenSub$name)
# [1] "Worku Bikila"         "Lazarus Nyakeraka"    "James Kariuki"        "William Kiptum"
length(nameClean) #69804
length(unique(nameClean)) #42882
# how many times a name appears in
table(table(nameClean))
# 1      2     3     4    5     6     7     8     9   10  11  12  13  14  15  17  18  19  30
#29291  7716  2736  1386  712   417   249   149   92  56  44  19  7   3   1   1   1   1   1
# Most common name
head( sort(table(nameClean), decreasing = TRUE), 1)
#Michael Smith
#30
# Selecting all Michael Smith's and seeing where they live
mSmith = cbMenSub[nameClean == "Michael Smith", ]
head(unique(mSmith$home))
#1] "Annapolis MD       "  "Bethesda MD        "  " Annapolis MD       " " Chevy Chase MD     " " Annandale VA
#To aid in cleaning the home variable, switch all characters to lowercase
nameClean = tolower(nameClean)
head( sort(table(nameClean), decreasing = TRUE), 1) # now we have 33 unique entries for Michael Smith
nameClean = gsub("[,.]", "", nameClean) # removing , . from home
#How many times a name appears in a given year
# Creates a table with every name in database and how many times it appears in each year
tabNameYr = table(cbMenSub$year, nameClean)
max(tabNameYr) # 5 runners with same name in 1 yr
tabNameYr[1,'worku Bikila']
tabNameYr[1,]
class(tabNameYr)
mode(tabNameYr)
names(attributes(tabNameYr))
dim(tabNameYr)
head(colnames(tabNameYr), 3)
which( tabNameYr == max(tabNameYr) )
which( tabNameYr == max(tabNameYr), arr.ind = TRUE )
indMax = which( tabNameYr == max(tabNameYr), arr.ind = TRUE )
colnames(tabNameYr)[indMax[2]]
cbMenSub$nameClean = nameClean
cbMenSub$yob = cbMenSub$year - cbMenSub$age
# Fix home in a similar way
homeClean = trimBlanks(tolower(cbMenSub$home))
cbMenSub$homeClean = gsub("[,.]", "", homeClean)
vars = c("year", "homeClean", "nameClean", "yob",  "runTime")
mb = which(nameClean == "michael brown")
birthOrder = order(cbMenSub$yob[mb])
cbMenSub[mb[birthOrder], vars]
cbMenSub$ID = paste(nameClean, cbMenSub$yob, sep = "_")
head(cbMenSub$ID,3)
races = tapply(cbMenSub$year, cbMenSub$ID, length)
races8 = names(races)[which(races >= 8)]
races8
length(races8)
men8 = cbMenSub[ cbMenSub$ID %in% races8, ]
orderByRunner = order(men8$ID, men8$year)
men8 = men8[orderByRunner, ]
men8
length(unique(men8$ID))
men8L
men8L = split(men8, men8$ID)
names(men8L) = races8
men8L
men8L[1]
men8L[1]
length(unique(men8$ID))
length(men8L)
gapTime = tapply(men8$runTime, men8$ID,
function(t) any(abs(diff(t)) > 20))
gapTime
sum(gapTime)
lapply(men8L[ gapTime ][1:2], function(df) df[, vars])
homeLen = nchar(cbMenSub$homeClean)
cbMenSub$state = substr(cbMenSub$homeClean,
start = homeLen - 1, stop = homeLen)
cbMenSub$state[cbMenSub$year == 2006] = NA
cbMenSub$ID = paste(cbMenSub$nameClean, cbMenSub$yob,
cbMenSub$state, sep = "_")
numRaces = tapply(cbMenSub$year, cbMenSub$ID, length)
races8 = names(numRaces)[which(numRaces >= 8)]
races8
men8 = cbMenSub[ cbMenSub$ID %in% races8, ]
orderByRunner = order(men8$ID, men8$year)
men8 = men8[orderByRunner, ]
length(races8)
men8L[1]
men8L = split(men8, men8$ID)
names(men8L) = races8
groups = 1 + (1:length(men8L) %% 9)
addRunners = function(listRunners, colors, numLty)
{
numRunners = length(listRunners)
colIndx = 1 + (1:numRunners) %% length(colors)
ltys = rep(1:numLty, each = length(colors), length = numRunners)
mapply(function(df, i) {
lines(df$runTime ~ df$age,
col = colors[colIndx[i]], lwd = 2, lty = ltys[i])
}, listRunners, i = 1:numRunners)
}
colors = c("#e41a1c", "#377eb8","#4daf4a", "#984ea3",
"#ff7f00", "#a65628")
par(mfrow = c(3, 3), mar = c(2, 2, 1, 1))
invisible(
sapply(1:9, function(grpId){
plot( x = 0, y = 0, type = "n",
xlim = c(20, 80), ylim = c(50, 130),
xlab = "Age (years)", ylab = "Run Time (minutes)")
addRunners(men8L[ groups == grpId ], colors, numLty = 6)
}) )
