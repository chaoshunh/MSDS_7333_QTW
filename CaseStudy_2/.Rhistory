#------------------ Sum Square Error Function --
# creating function to calculate the SS error for KNN prediction models
calcError =
function(estXY, actualXY)
sum( rowSums( (estXY - actualXY)^2) )
#-----------
# Calculating Sum of squared Error for model
actualXY = onlineSummary[ ,c('posX','posY')]
SSError <- sapply(list(estXYk1,estXYk3,estXYk5),calcError,actualXY)
# SS Error for K=1 659; SS Error for K=3 307, SS Error for K=5 276,
# --------------- Cross Validation ----------------
# -------------------------------------------------
# Number of folds for cross validation
v = 11
set.seed(123) # setting seed value, so that results are the same
# for multiple runs. If not, results would vary every time
# code is re-run
# -------------- Test Code --------
# Taking a random sample, without replacement, of the PosXY locations
permuteLocs = sample(unique(offlineSummaryMacRemoved$posXY))
# Creating a matrix with v columns and unique(posXY values) / V rows
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# Created a subset of offlineSummary matrix according to the split
# created in permueLocs.
# Picked PermuteLocs[ ,1] arbitrarity for reference
onlineFold = subset(offlineSummaryMacRemoved, posXY %in% permuteLocs[ , 1]) # approx 7900 observations
#---
#list(unique(offline$mac))
# Confirming that subMac[2] "00:0f:a3:39:dd:cd" is removed from offline dataset
#offlineMacRemoved = offline[ offline$mac != subMacs[as.integer(macRemoved)], ] #reduced to 769332 obs
if (macRemoved == 0){
offlineMacRemoved = offline
} else {
offlineMacRemoved = offline[ offline$mac != subMacs[as.integer(macRemoved)], ]}
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# Create a new dataframe using random sample angles for observations,
# using the reshapeSS function: 166 observations x 11 variables
onlineCVSummary = reshapeSS(offlineMacRemoved, keepVars = keepVars,
sampleAngle = TRUE)
# ----- Test Code ---
# Create onlineFold, using XY locaitons chose by permuteLocs.
#  Chose the 1st fold for reference: 15 obs x 11 variables
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# Create offlineFold, using XY locaitons chose by permuteLocs.
#  Chose the last fold for reference: 7200 obs x 15 variables
offlineFold = subset(offlineSummaryMacRemoved,
posXY %in% permuteLocs[ , -1])
# Using predXY function to predict xy locations, using
# cross validation folds of datasets
estFold = predXY(newSignals = onlineFold[ , 6:ncol(onlineFold)],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3,weighted = DisWeighted)
# Calculating SS Error for the folded subset (permuteLocs[ , 1])
# of the dataset
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold) #Calculated SS Error 133 (will vary)
v = 11 #repeated from earlier, for clarity: # of Folds
K = 20 # Number of nearest neighbors
err = rep(0, K)
# loop through all the cross validation folds, using K values from
# 1 to 20, to find and calculate the SS Errors for each
# Same as before: using numAngles = 3.
# Attempting to find the 'optimal' KNN value for the given dataset
# and parameters
# Note:  Takes Several minutes to run this loop************
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummaryMacRemoved,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:ncol(onlineFold)],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = Angles, k = k,weighted = DisWeighted)
err[k] = err[k] + calcError(estFold, actualFold)
}
}
#-------------FIG 1.13 RMSE vs K neighbors-Line graph
# Number of traning dataset angles = 3
pdf(file = paste("Fig 1.13 Geo_CVChoiceOfK_MacRemoved_",macRemoved,'_weighted_',DisWeighted,'_SigAngles_',Angles,".pdf"), width = 10, height = 6)
oldPar = par(mar = c(4, 3, 1, 1))
plot(y = err, x = (1:K),  type = "l", lwd= 2,
ylim = c((ymin=900), 2100),
xlab = "Number of Neighbors",
ylab = "Sum of Square Errors")
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
segments(x0 = 0, x1 = kMin, y0 = rmseMin, col = gray(0.4),
lty = 2, lwd = 2)
segments(x0 = kMin, x1 = kMin, y0 = ymin-100,  y1 = rmseMin,
col = grey(0.4), lty = 2, lwd = 2)
mtext(kMin, side = 1, line = 1, at = kMin, col = grey(0.4))
text(x = kMin - 2, y = rmseMin + 40,
label = as.character(round(rmseMin)), col = grey(0.4))
par(oldPar)
dev.off()
#-------
val <- match(min(err),err)
# Finding RMSE for optimal values of KNN k='val'
# Optimal KNN might vary if seed value changes
estXYkBest = predXY(newSignals = onlineSummary[ , 6:ncol(onlineSummary)],
newAngles = onlineSummary[ , 4],
offlineSummaryMacRemoved, numAngles = Angles, k = val,weighted = DisWeighted)
#calcError(estXYkBest, actualXY)# Error - 276 (may vary depending on K)
paste("Minimum Calc Error: ",calcError(estXYkBest, actualXY))
paste("K value: ",val)
paste('MacID Removed: ',subMacs[as.integer(macRemoved)])
paste('Weighted: ',DisWeighted)
paste('Signal Angles: ',Angles)
# removing one of the observations (subMac[2]) out of the analysis; "00:0f:a3:39:dd:cd". H
# offlineSummaryTest = subset(offlineSummary, mac != subMacs[2])
Angles = 3
macRemoved = 0
DisWeighted = TRUE
if (macRemoved == 0){
offlineSummaryMacRemoved = offlineSummary
AP = matrix( c( 7.5, 6.3, 7.5, 6.3, 2.5, -.8, 12.8, -2.8,
1, 14, 33.5, 9.3,  33.5, 2.8),
ncol = 2, byrow = TRUE,
dimnames = list(subMacs, c("x", "y") ))
} else {
offlineSummaryMacRemoved = subset(offlineSummary, mac != subMacs[as.integer(macRemoved)])
#identical(offlineSummaryTest, offlineSummaryMacRemoved)
# Create a matrix with the relative locations of th 6 access points
# using the heat maps to determine which MacID goes with a given location.
AP = matrix( c( 7.5, 6.3, 2.5, -.8, 12.8, -2.8,
1, 14, 33.5, 9.3,  33.5, 2.8),
ncol = 2, byrow = TRUE,
dimnames = list(subMacs[ -(as.integer(macRemoved)) ], c("x", "y") ))}
# Dispaly of Access Pt location and ID
AP
# Look at signal strength vs distance from access pt. Compute distances
# from taget emitting signal to access point.
diffs = offlineSummaryMacRemoved[ , c("posX", "posY")] -
AP[ offlineSummaryMacRemoved$mac, ]
# Using Eclidean distances for distance between handheld and access pts
offlineSummaryMacRemoved$dist = sqrt(diffs[ , 1]^2 + diffs[ , 2]^2)
#-------------FIG 1.11 Scatter Plot Matrix signal strength vs distance
# for each angle (8) and access point (6) = 48.
# Printed landscape for clarity
pdf(file=paste("Fig 1.11 Geo_ScatterSignalDist_MacRemoved_",macRemoved,'_weighted_',DisWeighted,'_SigAngles_',Angles,'.pdf'), width = 7, height = 10)
oldPar = par(mar = c(3.1, 3.1, 1, 1))
library(lattice)
xyplot(signal ~ dist | factor(mac) + factor(angle),
data = offlineSummaryMacRemoved, pch = 19, cex = 0.3,
par.strip.text = list(cex = 0.7),
xlab =paste("distance   Mac ID Removed ",subMacs[macRemoved]))
par(oldPar)
dev.off()
#----------------------------------------------------
#--------------
#--------------
#--------------  Working with Online dataset
#--------------
#--------------
#----------------------------------------------------
# using readData function to read in online data and parse the data
# accordingly.  Only using SubMac ID identified from offline results
# Creating location ID posXY variable, same as offline
macs = unique(offlineSummaryMacRemoved$mac)
online = readData("Data/online.final.trace.txt", subMacs = macs)
# 34778 observations x 8 variables
online$posXY = paste(online$posX, online$posY, sep = "-")
length(unique(online$posXY)) # 60 unique test positions [Note: 60 posX; 53 posY]
# Create a table with # of online readings at each unique location and angle
tabonlineXYA = table(online$posXY, online$angle)
tabonlineXYA[1:7, ]
# Rearranging the dataset:
# Creating dataset with single entry for each unique position and orientatoin
# Each obseravation will keep: Position variables orientation / angle
# Have separate variables for each MacID
# and create an average Signal Strength variable from all observations
# in online dataset (avg roughly ±110 observations each loc/angle/macID)
keepVars = c("posXY", "posX","posY", "orientation", "angle")
byLoc = with(online,
by(online, list(posXY),
function(x) {
ans = x[1, keepVars]
avgSS = tapply(x$signal, x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = (nrow(AP)),
dimnames = list(ans$posXY, names(avgSS)))
cbind(ans, y)
}))
onlineSummary = do.call("rbind", byLoc)
dim(onlineSummary) # Matrix OnlineSummary 60 X 11
names(onlineSummary)
#------------ Nearest Neighbor (1.5.2)
#----------------------------------------------
# Selecting the number of different angle observations that will be used
# during the NearestNeighbor calculations. Example:  Say we have an
# observation at 120°.  We can choose to include only training dataset
# with 135° orientation[closest angle multiple] (m=1), or we can choose
# flanking angles 90°, 135° m=2, or for 3 we choose the closest angle
# and the flanking angles: 90°,135°,180° (m=3).
# The signal strength for each location is averaged across all included
# angles
#------------------ ReShape Dataset Function-Signal Strength
# Similar to previous code that reshaped the Online dataset.
# but creating a function to do it.
# Rearranging the dataset:
# Creating dataset with single entry for each unique position and orientatoin
# Each obseravation will keep: Position variables orientation / angle
# Have separate variables for each MacID
# and create an average Signal Strength variable from all observations
# added the option to select one angle at random for each location.
# Using Boolean operation to make selection
reshapeSS = function(data, varSignal = "signal",
keepVars = c("posXY", "posX","posY"),
sampleAngle = FALSE,
refs = seq(0, 315, by = 45)) {
byLocation =
with(data, by(data, list(posXY),
function(x) {
if (sampleAngle) {
x = x[x$angle == sample(refs, size = 1), ]}
ans = x[1, keepVars]
avgSS = tapply(x[ , varSignal ], x$mac, mean)
y = matrix(avgSS, nrow = 1, ncol = (nrow(AP)),
dimnames = list(ans$posXY,
names(avgSS)))
cbind(ans, y)
}))
newDataSS = do.call("rbind", byLocation)
return(newDataSS)
}
#------------
#------------------ Selection of Traning Dataset Function --
# Similar to previous code that selected the number of different
# angle observations that will be used for the training dataset
# but creating a function to do it
selectTrain = function(angleNewObs, signals = NULL, m = 1){
# m is the number of angles to keep between 1 and 5
refs = seq(0, by = 45, length  = 8)
nearestAngle = roundOrientation(angleNewObs)
if (m %% 2 == 1)
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
else {
m = m + 1
angles = seq(-45 * (m - 1) /2, 45 * (m - 1) /2, length = m)
if (sign(angleNewObs - nearestAngle) > -1)
angles = angles[ -1 ]
else
angles = angles[ -m ]
}
angles = angles + nearestAngle
angles[angles < 0] = angles[ angles < 0 ] + 360
angles[angles > 360] = angles[ angles > 360 ] - 360
angles = sort(angles)
offlineSubset = signals[ signals$angle %in% angles, ]
reshapeSS(offlineSubset, varSignal = "avgSignal")
}
#--------
# Testing function with an observed angle of 130°; including
# 3 (flanking) observation angles. Signal strengths are averaged
# for the included angle observations.
#          train130 = selectTrain(130, offlineSummaryMacRemoved, m = 3)
#          dim(train130) #166 x 9
#          head(train130)
#------------------ Nearest Neighbor Function --
# Finding the nearest neighbor for newly observed signal,
# given the training data subset (angles included in training dataset).
# Calculates distance and returns an ordered listing of distances from
# the training observations in order of closeness to newly observed signal
findNN = function(newSignal, trainSubset) {
diffs = apply(trainSubset[ , 4:(3+nrow(AP))], 1,
function(x) x - newSignal)
dists = apply(diffs, 2, function(x) sqrt(sum(x^2)) )
closest = cbind(trainSubset[,1:3],dists)
closest = closest[order(closest$dists),]
#  print('findNN returns')
#  print(colnames(closest))
#  print(closest)
return(closest)
}
#----------
#------------------ KNN Prediction Function --
# Predicting the XY corrdinates for newly observed signals,
# given the subset of training dataset(# of angles,
# and # of nearest neighbors to use.
predXY = function(newSignals, newAngles, trainData,
numAngles = 1, k = 3,weighted = FALSE){
closeXY = list(length = nrow(newSignals))
for (i in 1:nrow(newSignals)) {
trainSS = selectTrain(newAngles[i], trainData, m = numAngles)
closeXY[[i]] =
findNN(newSignal = as.numeric(newSignals[i, ]), trainSS)
}
# Note: Using average distance for location estimation
# Could use distances that are weighted by the inversely proportional
# to the distance pg 35.
if (weighted == TRUE) {
#print('Weighted Section:')
#print(k)
#print(closeXY[[2]])
#print(closeXY[[2]][1,4])
#print(length(closeXY))
## Working on code
estX <- matrix(ncol = 1,nrow = length(closeXY))
estY <- matrix(ncol = 1,nrow = length(closeXY))
for (i in 1:length(closeXY)){
#print(closeXY[[i]])
numerX=rep(0,k)
numerY=rep(0,k)
denom = 0
for (m in 1:k){
denom = denom + (1/closeXY[[i]][m,4])}
#print(paste('Denom',denom))
for (j in 1:k) {
numerX[j] = closeXY[[i]][j,2]*((1/closeXY[[i]][j,4])/denom)
numerY[j] = closeXY[[i]][j,3]*((1/closeXY[[i]][j,4])/denom)
#print(paste(closeXY[[i]][j,2],closeXY[[i]][j,3],'numerX[j]  and numerY[j]',numerX[j],numerX[j],j))
}
estX[i,1] = sum(numerX)
estY[i,1] = sum(numerY)
#print(paste('estX and Y',estX,estY))
}
estXY = cbind(estX,estY)
} else {
estXY = lapply(closeXY,
function(x) sapply(x[ , 2:3],
function(x) mean(x[1:k])))
estXY = do.call("rbind", estXY)
}
return(estXY)
}
#-----
# ---------- Test Code ----
# Using training Dataset (offlineSummaryMacRemoved) to predict the
# location of online dataset (onlineSummary)
# Using 3 angles nearest and flanking above and below
# and non-weighted distance, using 3 nearest neighbors
estXYk3 = predXY(newSignals = onlineSummary[ , 6:ncol(onlineSummary)],
newAngles = onlineSummary[ , 4],
offlineSummaryMacRemoved, numAngles = 3, k = 3,weighted = DisWeighted)
estXYk3WT = predXY(newSignals = onlineSummary[ , 6:ncol(onlineSummary)],
newAngles = onlineSummary[ , 4],
offlineSummaryMacRemoved, numAngles = 3, k = 3,weighted = TRUE)
# Same code as above with the exception of
# using 1 nearest neighbors
estXYk1 = predXY(newSignals = onlineSummary[ , 6:ncol(onlineSummary)],
newAngles = onlineSummary[ , 4],
offlineSummaryMacRemoved, numAngles = 3, k = 1,weighted = DisWeighted)
estXYk5 = predXY(newSignals = onlineSummary[ , 6:ncol(onlineSummary)],
newAngles = onlineSummary[ , 4],
offlineSummaryMacRemoved, numAngles = 3, k = 5,weighted = DisWeighted)
#------------------ Floor Map Function --
# Creating a floor map with to compare actual online signal XY location
# and comparing it to the predicted XY location
floorErrorMap = function(estXY, actualXY, trainPoints = NULL, AP = NULL){
plot(0, 0, xlim = c(0, 35), ylim = c(-3, 15), type = "n",
xlab = "", ylab = "", axes = FALSE)
box()
# Drawing of Access Points
if ( !is.null(AP) ) points(AP, pch = 15, col = 'DarkGreen')
if ( !is.null(trainPoints) )
# Drawing of 'training points' locations
points(trainPoints, pch = 19, col="grey", cex = 0.6)
#Drawing of Actual point location
points(x = actualXY[, 1], y = actualXY[, 2],
pch = 19, cex = 0.8, col = 'blue' )
#Drawing of Estimated point location
points(x = estXY[, 1], y = estXY[, 2],
pch = 8, cex = 0.8 )
#Drawing line linking the est and actual points
segments(x0 = estXY[, 1], y0 = estXY[, 2],
x1 = actualXY[, 1], y1 = actualXY[ , 2],
lwd = 2, col = "red")
}
#---
# creating variable to locate all the training Points
trainPoints = offlineSummaryMacRemoved[ offlineSummaryMacRemoved$angle == 0 &
offlineSummaryMacRemoved$mac == "00:14:bf:3b:c7:c6" ,
c("posX", "posY")]
#-------------FIG 1.12A Geo Floor Map (actual vs predicted locations)
# Using KNN = 3, Number of traning dataset angles = 3
pdf(file=paste("Fig 1.12A GEO_FloorPlan_K3_Errors_MacRemoved_",macRemoved,'_weighted_',DisWeighted,'_SigAngles_',Angles,".pdf"), width = 10, height = 7)
oldPar = par(mar = c(1, 1, 1, 1))
floorErrorMap(estXYk3, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
par(oldPar)
dev.off()
#-------------FIG 1.12B Geo Floor Map (actual vs predicted locations)
# Using KNN = 1, Number of traning dataset angles = 3
pdf(file=paste("Fig 1.12B GEO_FloorPlan_K1_Errors_MacRemoved_",macRemoved,'_weighted_',DisWeighted,'_SigAngles_',Angles,".pdf"), width = 10, height = 7)
oldPar = par(mar = c(1, 1, 1, 1))
floorErrorMap(estXYk1, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
par(oldPar)
dev.off()
#-------------FIG 1.12C Geo Floor Map (actual vs predicted locations)
# Using KNN = 5, Number of traning dataset angles = 3
pdf(file=paste("Fig 1.12C GEO_FloorPlan_K5_Errors_MacRemoved_",macRemoved,'_weighted_',DisWeighted,'_SigAngles_',Angles,".pdf"), width = 10, height = 7)
oldPar = par(mar = c(1, 1, 1, 1))
floorErrorMap(estXYk1, onlineSummary[ , c("posX","posY")],
trainPoints = trainPoints, AP = AP)
par(oldPar)
dev.off()
#------------------ Sum Square Error Function --
# creating function to calculate the SS error for KNN prediction models
calcError =
function(estXY, actualXY)
sum( rowSums( (estXY - actualXY)^2) )
#-----------
# Calculating Sum of squared Error for model
actualXY = onlineSummary[ ,c('posX','posY')]
SSError <- sapply(list(estXYk1,estXYk3,estXYk5),calcError,actualXY)
# SS Error for K=1 659; SS Error for K=3 307, SS Error for K=5 276,
# --------------- Cross Validation ----------------
# -------------------------------------------------
# Number of folds for cross validation
v = 11
set.seed(123) # setting seed value, so that results are the same
# for multiple runs. If not, results would vary every time
# code is re-run
# -------------- Test Code --------
# Taking a random sample, without replacement, of the PosXY locations
permuteLocs = sample(unique(offlineSummaryMacRemoved$posXY))
# Creating a matrix with v columns and unique(posXY values) / V rows
permuteLocs = matrix(permuteLocs, ncol = v,
nrow = floor(length(permuteLocs)/v))
# Created a subset of offlineSummary matrix according to the split
# created in permueLocs.
# Picked PermuteLocs[ ,1] arbitrarity for reference
onlineFold = subset(offlineSummaryMacRemoved, posXY %in% permuteLocs[ , 1]) # approx 7900 observations
#---
#list(unique(offline$mac))
# Confirming that subMac[2] "00:0f:a3:39:dd:cd" is removed from offline dataset
#offlineMacRemoved = offline[ offline$mac != subMacs[as.integer(macRemoved)], ] #reduced to 769332 obs
if (macRemoved == 0){
offlineMacRemoved = offline
} else {
offlineMacRemoved = offline[ offline$mac != subMacs[as.integer(macRemoved)], ]}
keepVars = c("posXY", "posX","posY", "orientation", "angle")
# Create a new dataframe using random sample angles for observations,
# using the reshapeSS function: 166 observations x 11 variables
onlineCVSummary = reshapeSS(offlineMacRemoved, keepVars = keepVars,
sampleAngle = TRUE)
# ----- Test Code ---
# Create onlineFold, using XY locaitons chose by permuteLocs.
#  Chose the 1st fold for reference: 15 obs x 11 variables
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , 1])
# Create offlineFold, using XY locaitons chose by permuteLocs.
#  Chose the last fold for reference: 7200 obs x 15 variables
offlineFold = subset(offlineSummaryMacRemoved,
posXY %in% permuteLocs[ , -1])
# Using predXY function to predict xy locations, using
# cross validation folds of datasets
estFold = predXY(newSignals = onlineFold[ , 6:ncol(onlineFold)],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = 3, k = 3,weighted = DisWeighted)
# Calculating SS Error for the folded subset (permuteLocs[ , 1])
# of the dataset
actualFold = onlineFold[ , c("posX", "posY")]
calcError(estFold, actualFold) #Calculated SS Error 133 (will vary)
v = 11 #repeated from earlier, for clarity: # of Folds
K = 20 # Number of nearest neighbors
err = rep(0, K)
# loop through all the cross validation folds, using K values from
# 1 to 20, to find and calculate the SS Errors for each
# Same as before: using numAngles = 3.
# Attempting to find the 'optimal' KNN value for the given dataset
# and parameters
# Note:  Takes Several minutes to run this loop************
for (j in 1:v) {
onlineFold = subset(onlineCVSummary,
posXY %in% permuteLocs[ , j])
offlineFold = subset(offlineSummaryMacRemoved,
posXY %in% permuteLocs[ , -j])
actualFold = onlineFold[ , c("posX", "posY")]
for (k in 1:K) {
estFold = predXY(newSignals = onlineFold[ , 6:ncol(onlineFold)],
newAngles = onlineFold[ , 4],
offlineFold, numAngles = Angles, k = k,weighted = DisWeighted)
err[k] = err[k] + calcError(estFold, actualFold)
}
}
#-------------FIG 1.13 RMSE vs K neighbors-Line graph
# Number of traning dataset angles = 3
pdf(file = paste("Fig 1.13 Geo_CVChoiceOfK_MacRemoved_",macRemoved,'_weighted_',DisWeighted,'_SigAngles_',Angles,".pdf"), width = 10, height = 6)
oldPar = par(mar = c(4, 3, 1, 1))
plot(y = err, x = (1:K),  type = "l", lwd= 2,
ylim = c((ymin=900), 2100),
xlab = "Number of Neighbors",
ylab = "Sum of Square Errors")
rmseMin = min(err)
kMin = which(err == rmseMin)[1]
segments(x0 = 0, x1 = kMin, y0 = rmseMin, col = gray(0.4),
lty = 2, lwd = 2)
segments(x0 = kMin, x1 = kMin, y0 = ymin-100,  y1 = rmseMin,
col = grey(0.4), lty = 2, lwd = 2)
mtext(kMin, side = 1, line = 1, at = kMin, col = grey(0.4))
text(x = kMin - 2, y = rmseMin + 40,
label = as.character(round(rmseMin)), col = grey(0.4))
par(oldPar)
dev.off()
#-------
val <- match(min(err),err)
# Finding RMSE for optimal values of KNN k='val'
# Optimal KNN might vary if seed value changes
estXYkBest = predXY(newSignals = onlineSummary[ , 6:ncol(onlineSummary)],
newAngles = onlineSummary[ , 4],
offlineSummaryMacRemoved, numAngles = Angles, k = val,weighted = DisWeighted)
#calcError(estXYkBest, actualXY)# Error - 276 (may vary depending on K)
paste("Minimum Calc Error: ",calcError(estXYkBest, actualXY))
paste("K value: ",val)
paste('MacID Removed: ',subMacs[as.integer(macRemoved)])
paste('Weighted: ',DisWeighted)
paste('Signal Angles: ',Angles)
